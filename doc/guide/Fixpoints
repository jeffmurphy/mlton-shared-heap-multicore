<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>Fixpoints - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-833377-1";
urchinTracker();
</script>
<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton 20070709</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      Fixpoints
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "Index">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">
In a strict language, such as <a href="StandardML">Standard ML</a>, you sometimes want to provide a fixpoint combinator for an abstract type <tt>t</tt> to make it possible to write recursive definitions.  While it is easy to write an ad hoc fixpoint combinator for a single abstract type, it is more challenging to provide a general purpose framework for computing fixpoints.  First of all, a single combinator <tt>fix</tt> with a type of the form <tt>(t&nbsp;-&gt;&nbsp;t)&nbsp;-&gt;&nbsp;t</tt> does not support mutual recursion over multiple values of type <tt>t</tt>.  To support mutual recursion, you might provide a family of fixpoint combinators having types of the form <tt>(u&nbsp;-&gt;&nbsp;u)&nbsp;-&gt;&nbsp;u</tt> where <tt>u</tt> is a type of the form <tt>t&nbsp;*&nbsp;...&nbsp;*&nbsp;t</tt>.  Unfortunately, even such a family of fixpoint combinators does not support mutual recursion over multiple different abstract types.  The gist of the problem is that we need a <a href="TypeIndexedValues">type-indexed</a> family of fixpoint combinators.  Below is a solution that allows for computing fixpoints over arbitrary products.  The code on this page makes use of some <a href="Utilities">Utilities</a>. <p>
First the signature of the fixpoint framework: 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">signature</FONT></B> FIX =
  <B><FONT COLOR="#0000FF">sig</FONT></B>
    <B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t1
    </FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t2
    </FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t </FONT></B>=<B><FONT COLOR="#228B22"> 'a t1 -&gt; 'a t2

    </FONT></B><B><FONT COLOR="#A020F0">exception</FONT></B><B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">Fix</FONT>

    </FONT></B><B><FONT COLOR="#A020F0">val</FONT></B> fix : 'a t -&gt; 'a fix
    <B><FONT COLOR="#A020F0">val</FONT></B> pure : ('a * 'a uop) thunk -&gt; 'a t
    <B><FONT COLOR="#A020F0">val</FONT></B> tier : ('a * 'a effect) thunk -&gt; 'a t
    <B><FONT COLOR="#A020F0">val</FONT></B> iso : ('a, 'b) emb -&gt; 'b t -&gt; 'a t
    <B><FONT COLOR="#A020F0">val</FONT></B> ^ : 'a t * 'b t -&gt; ('a, 'b) product t
  <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
<tt>fix</tt> is a <a href="TypeIndexedValues">type-indexed</a> function.  The type parameter to <tt>fix</tt> is called a "tier".  To compute fixpoints over products, one uses the <tt>^</tt> operator to combine tiers.  To provide a fixpoint combinator for an abstract type, one implements a tier providing a thunk whose instantation allocates a fresh "knot" and a procedure for "tying" it.  Naturally this means that not all possible ways of computing a fixpoint of a particular type are possible under this framework.  The <tt>pure</tt> combinator is a generalization of <tt>tier</tt>.  The <tt>iso</tt> combinator is provided for reusing existing tiers. 
</p>
<p>
Note that instead of using an infix operator, we could alternatively employ an interface using <a href="Fold">Fold</a>.  Also, the tiers are eta-expanded to work around the <a href="ValueRestriction">value restriction</a>, while maintaining abstraction (the signature keeps tiers abstract). 
</p>
<p>
Here is an implementation: 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">structure</FONT></B> Fix :&gt; FIX =
   <B><FONT COLOR="#0000FF">struct</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t1 </FONT></B>=<B><FONT COLOR="#228B22"> unit
      </FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t2 </FONT></B>=<B><FONT COLOR="#228B22"> 'a * 'a uop
      </FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t </FONT></B>=<B><FONT COLOR="#228B22"> 'a t1 -&gt; 'a t2

      </FONT></B><B><FONT COLOR="#A020F0">exception</FONT></B><B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">Fix</FONT>

      </FONT></B><B><FONT COLOR="#A020F0">fun</FONT></B> fix a f =
         <B><FONT COLOR="#A020F0">let</FONT></B>
            <B><FONT COLOR="#A020F0">val</FONT></B> (a, ta) = a ()
         <B><FONT COLOR="#A020F0">in</FONT></B>
            ta (f a)
         <B><FONT COLOR="#A020F0">end</FONT></B>

      <B><FONT COLOR="#A020F0">val</FONT></B> pure = id

      <B><FONT COLOR="#A020F0">fun</FONT></B> tier th () =
          <B><FONT COLOR="#A020F0">let</FONT></B>
             <B><FONT COLOR="#A020F0">val</FONT></B> (a, ta) = th ()
          <B><FONT COLOR="#A020F0">in</FONT></B>
             (a, const a o ta)
          <B><FONT COLOR="#A020F0">end</FONT></B>

      <B><FONT COLOR="#A020F0">fun</FONT></B> iso (a2b, b2a) b () =
         <B><FONT COLOR="#A020F0">let</FONT></B>
            <B><FONT COLOR="#A020F0">val</FONT></B> (b, tb) = b ()
         <B><FONT COLOR="#A020F0">in</FONT></B>
            (b2a b, b2a o tb o a2b)
         <B><FONT COLOR="#A020F0">end</FONT></B>

      <B><FONT COLOR="#A020F0">fun</FONT></B> (a ^ b) () =
         <B><FONT COLOR="#A020F0">let</FONT></B>
            <B><FONT COLOR="#A020F0">val</FONT></B> (a, ta) = a ()
            <B><FONT COLOR="#A020F0">val</FONT></B> (b, tb) = b ()
         <B><FONT COLOR="#A020F0">in</FONT></B>
            (a &amp; b, <B><FONT COLOR="#A020F0">fn</FONT></B> a &amp; b =&gt; ta a &amp; tb b)
         <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
Let's then take a look at some examples.  First a simple tier for functions: 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">structure</FONT></B> Fn :&gt;
   <B><FONT COLOR="#0000FF">sig</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> Y : ('a -&gt; 'b) Fix.t
   <B><FONT COLOR="#0000FF">end</FONT></B> = <B><FONT COLOR="#0000FF">struct</FONT></B>
      <B><FONT COLOR="#A020F0">fun</FONT></B> Y ? = Fix.tier (<B><FONT COLOR="#A020F0">fn</FONT></B> () =&gt;
                             <B><FONT COLOR="#A020F0">let</FONT></B>
                                <B><FONT COLOR="#A020F0">val</FONT></B> r = ref (fail Fix.Fix)
                                <B><FONT COLOR="#A020F0">fun</FONT></B> f x = !r x
                             <B><FONT COLOR="#A020F0">in</FONT></B>
                                (f, r &lt;\ <B><FONT COLOR="#A020F0">op</FONT></B> :=)
                             <B><FONT COLOR="#A020F0">end</FONT></B>) ?
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
Here is an example of a mutually recursive definition of functions: 
</p>

<pre class=code>
<B><FONT COLOR="#A020F0">val</FONT></B> isEven &amp; isOdd =
    <B><FONT COLOR="#A020F0">let</FONT></B> <B><FONT COLOR="#0000FF">open</FONT></B> Fix Fn <B><FONT COLOR="#A020F0">in</FONT></B> fix (Y^Y) <B><FONT COLOR="#A020F0">end</FONT></B>
       (<B><FONT COLOR="#A020F0">fn</FONT></B> isEven &amp; isOdd =&gt;
           (<B><FONT COLOR="#A020F0">fn</FONT></B> <B><FONT COLOR="#5F9EA0">0w0</FONT></B> =&gt; true
             | <B><FONT COLOR="#5F9EA0">0w1</FONT></B> =&gt; false
             | n =&gt; isOdd (n-<B><FONT COLOR="#5F9EA0">0w1</FONT></B>)) &amp;
           (<B><FONT COLOR="#A020F0">fn</FONT></B> <B><FONT COLOR="#5F9EA0">0w0</FONT></B> =&gt; false
             | <B><FONT COLOR="#5F9EA0">0w1</FONT></B> =&gt; true
             | n =&gt; isEven (n-<B><FONT COLOR="#5F9EA0">0w1</FONT></B>)))
</PRE>
<p>
 
</p>
<p>
Our second example is a naive implementation of lazy promises: 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">structure</FONT></B> Promise :&gt;
   <B><FONT COLOR="#0000FF">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t
      </FONT></B><B><FONT COLOR="#A020F0">val</FONT></B> lazy : 'a thunk -&gt; 'a t
      <B><FONT COLOR="#A020F0">val</FONT></B> force : 'a t -&gt; 'a
      <B><FONT COLOR="#A020F0">val</FONT></B> Y : 'a t Fix.t
   <B><FONT COLOR="#0000FF">end</FONT></B> = <B><FONT COLOR="#0000FF">struct</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B><B><FONT COLOR="#228B22"> 'a t' </FONT></B>=<B><FONT COLOR="#228B22">
         <FONT COLOR="#B8860B">Exn</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> exn
       </FONT></B>|<B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">Thunk</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> 'a thunk
       </FONT></B>|<B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">Value</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> 'a
      </FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t </FONT></B>=<B><FONT COLOR="#228B22"> 'a t' ref
      </FONT></B><B><FONT COLOR="#A020F0">fun</FONT></B> lazy f = ref (Thunk f)
      <B><FONT COLOR="#A020F0">fun</FONT></B> force t =
         <B><FONT COLOR="#A020F0">case</FONT></B> !t <B><FONT COLOR="#A020F0">of</FONT></B>
            Exn e =&gt; <B><FONT COLOR="#A020F0">raise</FONT></B> e
          | Thunk f =&gt;
            (t := Value (f ())
             <B><FONT COLOR="#A020F0">handle</FONT></B> e =&gt; t := Exn e
           ; force t)
          | Value v =&gt; v
      <B><FONT COLOR="#A020F0">fun</FONT></B> Y ? = Fix.tier (<B><FONT COLOR="#A020F0">fn</FONT></B> () =&gt;
                             <B><FONT COLOR="#A020F0">let</FONT></B>
                                <B><FONT COLOR="#A020F0">val</FONT></B> r = lazy (fail Fix.Fix)
                             <B><FONT COLOR="#A020F0">in</FONT></B>
                                (r, r &lt;\ <B><FONT COLOR="#A020F0">op</FONT></B> := o !)
                             <B><FONT COLOR="#A020F0">end</FONT></B>) ?
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
An example use of our naive lazy promises is to implement equally naive lazy streams: 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">structure</FONT></B> Stream :&gt;
   <B><FONT COLOR="#0000FF">sig</FONT></B>
      <B><FONT COLOR="#A020F0">type</FONT></B><B><FONT COLOR="#228B22"> 'a t
      </FONT></B><B><FONT COLOR="#A020F0">val</FONT></B> cons : 'a * 'a t -&gt; 'a t
      <B><FONT COLOR="#A020F0">val</FONT></B> get : 'a t -&gt; ('a * 'a t) option
      <B><FONT COLOR="#A020F0">val</FONT></B> Y : 'a t Fix.t
   <B><FONT COLOR="#0000FF">end</FONT></B> = <B><FONT COLOR="#0000FF">struct</FONT></B>
      <B><FONT COLOR="#A020F0">datatype</FONT></B><B><FONT COLOR="#228B22"> 'a t </FONT></B>=<B><FONT COLOR="#228B22"> <FONT COLOR="#B8860B">IN</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> ('a * 'a t) option Promise.t
      </FONT></B><B><FONT COLOR="#A020F0">fun</FONT></B> cons (x, xs) = IN (Promise.lazy (<B><FONT COLOR="#A020F0">fn</FONT></B> () =&gt; SOME (x, xs)))
      <B><FONT COLOR="#A020F0">fun</FONT></B> get (IN p) = Promise.force p
      <B><FONT COLOR="#A020F0">fun</FONT></B> Y ? = Fix.iso (<B><FONT COLOR="#A020F0">fn</FONT></B> IN p =&gt; p, IN) Promise.Y ?
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
Note that above we make use of the <tt>Fix.iso</tt> combinator.  Here is a finite representation of an infinite stream of ones: 
</p>

<pre class=code>
<B><FONT COLOR="#A020F0">val</FONT></B> ones =
   <B><FONT COLOR="#A020F0">let</FONT></B>
      <B><FONT COLOR="#0000FF">open</FONT></B> Fix Stream
   <B><FONT COLOR="#A020F0">in</FONT></B>
      fix Y (<B><FONT COLOR="#A020F0">fn</FONT></B> ones =&gt; cons (<B><FONT COLOR="#5F9EA0">1</FONT></B>, ones))
   <B><FONT COLOR="#A020F0">end</FONT></B>
</PRE>
<p>
 
</p>
</div>



<p>
<hr>
Last edited on 2006-08-30 09:45:25 by <span title="www-cache2.hel.fi.ssh.com"><a href="VesaKarvonen">VesaKarvonen</a></span>.
</body></html>
